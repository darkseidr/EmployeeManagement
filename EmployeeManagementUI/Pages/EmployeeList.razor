@page "/employees"
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Employee List</h3>

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Department</th>
            <th>Active</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in employees)
        {
            <tr>
                <td>@employee.Id</td>
                <td>@(employee.FirstName + " " + employee.LastName)</td>
                <td>@employee.Email</td>
                <td>@employee.Department</td>
                <td>@(employee.IsActive ? "Yes" : "No")</td>
                <td>
                    <button class="btn btn-primary btn-sm mr-2" @onclick="() => EditEmployee(employee.Id)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-success mt-3" @onclick="NavigateToAddEmployee">Add Employee</button>

<style>
    /* Custom CSS */
    .table {
        width: 100%;
        max-width: 100%;
        margin-bottom: 1rem;
        background-color: transparent;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: top;
            border-top: 1px solid #dee2e6;
        }

        .table thead th {
            vertical-align: bottom;
            border-bottom: 2px solid #dee2e6;
            background-color: #343a40;
            color: #fff;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

@code {
    private List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            employees = await EmployeeService.GetEmployees(token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            await EmployeeService.DeleteEmployee(id, token);
            employees = await EmployeeService.GetEmployees(token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting employee: {ex.Message}");
        }
    }

    private void NavigateToAddEmployee()
    {
        NavigationManager.NavigateTo("/employees/add");
    }
}